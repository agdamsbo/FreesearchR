% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_plots.R, R/plot_sankey.R
\name{data-plots}
\alias{data-plots}
\alias{plot_ridge}
\alias{create_plot}
\alias{plot_hbars}
\alias{plot_violin}
\alias{plot_scatter}
\alias{sankey_ready}
\alias{plot_sankey}
\title{Plot nice ridge plot}
\usage{
plot_ridge(data, x, y, z = NULL, ...)

create_plot(data, type, x, y, z = NULL, ...)

plot_hbars(data, x, y, z = NULL)

plot_violin(data, x, y, z = NULL)

plot_scatter(data, x, y, z = NULL)

sankey_ready(data, x, y, numbers = "count", ...)

plot_sankey(data, x, y, z = NULL, color.group = "x", colors = NULL)
}
\arguments{
\item{data}{data.frame}

\item{x}{primary variable}

\item{y}{secondary variable}

\item{z}{tertiary variable}

\item{...}{ignored for now}

\item{type}{plot type (derived from possible_plots() and matches custom function)}
}
\value{
ggplot2 object

ggplot2 object

ggplot2 object

ggplot2 object

ggplot2 object

data.frame

ggplot2 object
}
\description{
Plot nice ridge plot

Wrapper to create plot based on provided type

Nice horizontal stacked bars (Grotta bars)

Beatiful violin plot

Beautiful violin plot

Readying data for sankey plot

Beautiful sankey plot with option to split by a tertiary group
}
\examples{
mtcars |>
  default_parsing() |>
  plot_ridge(x = "mpg", y = "cyl")
mtcars |> plot_ridge(x = "mpg", y = "cyl", z = "gear")
create_plot(mtcars, "plot_violin", "mpg", "cyl")
mtcars |> plot_hbars(x = "carb", y = "cyl")
mtcars |> plot_hbars(x = "carb", y = NULL)
mtcars |> plot_violin(x = "mpg", y = "cyl", z = "gear")
mtcars |> plot_scatter(x = "mpg", y = "wt")
ds <- data.frame(g = sample(LETTERS[1:2], 100, TRUE), first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)), last = sample(c(letters[1:4], NA), 100, TRUE, prob = c(rep(.23, 4), .08)))
ds |> sankey_ready("first", "last")
ds |> sankey_ready("first", "last", numbers = "percentage")
data.frame(
  g = sample(LETTERS[1:2], 100, TRUE),
  first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)),
  last = sample(c(TRUE, FALSE, FALSE), 100, TRUE)
) |>
  sankey_ready("first", "last")
ds <- data.frame(g = sample(LETTERS[1:2], 100, TRUE), first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)), last = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)))
ds |> plot_sankey("first", "last")
ds |> plot_sankey("first", "last", color.group = "y")
ds |> plot_sankey("first", "last", z = "g", color.group = "y")
}
