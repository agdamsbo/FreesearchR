% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_plots.R, R/plot_box.R, R/plot_hbar.R,
%   R/plot_ridge.R, R/plot_sankey.R, R/plot_scatter.R, R/plot_violin.R
\name{data-plots}
\alias{data-plots}
\alias{data_visuals_ui}
\alias{data_visuals_server}
\alias{create_plot}
\alias{plot_box}
\alias{plot_box_single}
\alias{plot_hbars}
\alias{plot_ridge}
\alias{sankey_ready}
\alias{plot_sankey}
\alias{plot_scatter}
\alias{plot_violin}
\title{Data correlations evaluation module}
\usage{
data_visuals_ui(id, tab_title = "Plots", ...)

data_visuals_server(id, data, ...)

create_plot(data, type, pri, sec, ter = NULL, ...)

plot_box(data, pri, sec, ter = NULL)

plot_box_single(data, pri, sec = NULL, seed = 2103)

plot_hbars(data, pri, sec, ter = NULL)

plot_ridge(data, x, y, z = NULL, ...)

sankey_ready(data, pri, sec, numbers = "count", ...)

plot_sankey(data, pri, sec, ter = NULL, color.group = "x", colors = NULL)

plot_scatter(data, pri, sec, ter = NULL)

plot_violin(data, pri, sec, ter = NULL)
}
\arguments{
\item{id}{Module id. (Use 'ns("id")')}

\item{...}{ignored for now}

\item{data}{data.frame}

\item{type}{plot type (derived from possible_plots() and matches custom function)}

\item{pri}{primary variable}

\item{sec}{secondary variable}

\item{ter}{tertiary variable}
}
\value{
Shiny ui module

shiny server module

ggplot2 object

ggplot2 object

ggplot object

ggplot2 object

ggplot2 object

data.frame

ggplot2 object

ggplot2 object

ggplot2 object
}
\description{
Data correlations evaluation module

Wrapper to create plot based on provided type

Beautiful box plot(s)

Create nice box-plots

Nice horizontal stacked bars (Grotta bars)

Plot nice ridge plot

Readying data for sankey plot

Beautiful sankey plot with option to split by a tertiary group

Beautiful violin plot

Beatiful violin plot
}
\examples{
create_plot(mtcars, "plot_violin", "mpg", "cyl") |> attributes()
mtcars |> plot_box(pri = "mpg", sec = "cyl", ter = "gear")
mtcars |>
  default_parsing() |>
  plot_box(pri = "mpg", sec = "cyl", ter = "gear")
mtcars |> plot_box_single("mpg","cyl")
mtcars |> plot_hbars(pri = "carb", sec = "cyl")
mtcars |> plot_hbars(pri = "carb", sec = NULL)
mtcars |>
  default_parsing() |>
  plot_ridge(x = "mpg", y = "cyl")
mtcars |> plot_ridge(x = "mpg", y = "cyl", z = "gear")
ds <- data.frame(g = sample(LETTERS[1:2], 100, TRUE), first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)), last = sample(c(letters[1:4], NA), 100, TRUE, prob = c(rep(.23, 4), .08)))
ds |> sankey_ready("first", "last")
ds |> sankey_ready("first", "last", numbers = "percentage")
data.frame(
  g = sample(LETTERS[1:2], 100, TRUE),
  first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)),
  last = sample(c(TRUE, FALSE, FALSE), 100, TRUE)
) |>
  sankey_ready("first", "last")
ds <- data.frame(g = sample(LETTERS[1:2], 100, TRUE), first = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)), last = REDCapCAST::as_factor(sample(letters[1:4], 100, TRUE)))
ds |> plot_sankey("first", "last")
ds |> plot_sankey("first", "last", color.group = "y")
ds |> plot_sankey("first", "last", z = "g", color.group = "y")
mtcars |> plot_scatter(pri = "mpg", sec = "wt")
mtcars |> plot_violin(pri = "mpg", sec = "cyl", ter = "gear")
}
